[
  {
    "name": "SG_Core.cs",
    "description": "Initializes and manages SenseCom or Android connections, handles SDK startup, logging, and shutdown.",
    "tags": ["core", "sdk", "communication", "init", "manager"]
  },
  {
    "name": "SG_IAndroid.cs",
    "description": "Provides Android Bluetooth communication bridge for Nova gloves, manages data transfer via Java bridge.",
    "tags": ["android", "bluetooth", "communication", "mobile"]
  },
  {
    "name": "SG_Debugger.cs",
    "description": "Controls debug logging levels, shows SDK versions, and manages SenseCom debug output.",
    "tags": ["debug", "log", "version", "diagnostics"]
  },
  {
    "name": "SG_FileIO.cs",
    "description": "Provides file reading and writing utilities for text logs and configuration files.",
    "tags": ["file", "io", "read", "write", "storage"]
  },
  {
    "name": "SG_HandStateIndicator.cs",
    "description": "Displays glove connection and calibration status visually using color changes and text feedback.",
    "tags": ["status", "indicator", "calibration", "ui"]
  },
  {
    "name": "SG_Conversions.cs",
    "description": "Provides math and coordinate conversion helpers between Unity and SGCore systems.",
    "tags": ["math", "convert", "transform", "vector"]
  },
  {
    "name": "SG_Activator.cs",
    "description": "Utility script to activate or deactivate components or objects in Unity scenes.",
    "tags": ["utility", "enable", "disable", "component"]
  },
  {
    "name": "SG_User.cs",
    "description": "Manages left and right gloves, assigns them to tracked hands, and coordinates user-level interactions.",
    "tags": ["user", "glove", "manager", "hands"]
  },
  {
    "name": "SG_Util.cs",
    "description": "General utility functions, events, and data structures used throughout the SDK.",
    "tags": ["utility", "helper", "tools"]
  },

  {
    "name": "SG_HandPose.cs",
    "description": "Defines the full 3D hand pose including joint transforms and rotations.",
    "tags": ["hand", "pose", "tracking", "rotation"]
  },
  {
    "name": "SG_HandModelInfo.cs",
    "description": "Stores structural data of the hand model including finger segments and joint hierarchy.",
    "tags": ["hand", "model", "info", "skeleton"]
  },
  {
    "name": "SG_HandAnimator.cs",
    "description": "Animates the 3D hand model based on tracked joint data and finger flexion.",
    "tags": ["hand", "animation", "model", "flexion"]
  },
  {
    "name": "SG_HandComponent.cs",
    "description": "Base class for components that interact with or depend on the hand tracking system.",
    "tags": ["component", "hand", "base"]
  },
  {
    "name": "SG_HandPhysics.cs",
    "description": "Adds physical colliders and rigidbodies to the hand model for collision interactions.",
    "tags": ["physics", "collider", "hand", "interaction"]
  },
  {
    "name": "SG_HandPoser3D.cs",
    "description": "Applies pose data to 3D hand transforms for visual or interaction purposes.",
    "tags": ["pose", "3d", "animation"]
  },
  {
    "name": "SG_LinkedHandPoser3D.cs",
    "description": "Updates hand poses in real-time by linking them directly to live glove data.",
    "tags": ["linked", "live", "pose", "update"]
  },
  {
    "name": "SG_HandProjection.cs",
    "description": "Predicts and corrects finger positions before collisions occur for smoother tactile realism.",
    "tags": ["projection", "prediction", "collision"]
  },
  {
    "name": "SG_FingerProjector1DoF.cs",
    "description": "Calculates one-degree-of-freedom finger projection and contact points for accurate feedback.",
    "tags": ["finger", "projection", "tracking"]
  },
  {
    "name": "SG_FingerPassThrough.cs",
    "description": "Prevents fingers from visually passing through solid objects using pass-through correction.",
    "tags": ["finger", "collision", "visual", "clipping"]
  },
  {
    "name": "SG_PassThroughCollider.cs",
    "description": "Detects penetration between fingers and objects to trigger feedback.",
    "tags": ["collision", "finger", "trigger", "feedback"]
  },
  {
    "name": "SG_HandTracking.cs",
    "description": "Handles retrieval and updates of hand tracking data from the SenseGlove SDK.",
    "tags": ["tracking", "hand", "data"]
  },

  {
    "name": "SG_HandFeedback.cs",
    "description": "Main feedback manager controlling all haptic and force signals sent to the glove.",
    "tags": ["feedback", "force", "haptics"]
  },
  {
    "name": "SG_FingerFeedback.cs",
    "description": "Computes per-finger force levels based on object penetration or pressure.",
    "tags": ["finger", "force", "feedback"]
  },
  {
    "name": "SG_CustomWaveform.cs",
    "description": "Defines vibration waveforms for haptic feedback on Nova gloves.",
    "tags": ["waveform", "vibration", "haptic"]
  },
  {
    "name": "SG_Waveform.cs",
    "description": "Legacy waveform class defining vibration patterns for haptic motors.",
    "tags": ["waveform", "haptics", "vibration"]
  },
  {
    "name": "SG_Haptics.cs",
    "description": "Utility for controlling vibration and force feedback channels of the glove.",
    "tags": ["haptics", "feedback", "vibration"]
  },
  {
    "name": "SG_ImpactFeedback.cs",
    "description": "Triggers vibration on collision or impact events.",
    "tags": ["impact", "collision", "feedback", "vibration"]
  },
  {
    "name": "SG_ObjectVibration.cs",
    "description": "Applies vibration feedback to objects upon touch or grab.",
    "tags": ["vibration", "object", "touch", "feedback"]
  },
  {
    "name": "SG_MeshDeform.cs",
    "description": "Deforms a mesh based on contact pressure or interaction forces.",
    "tags": ["mesh", "deformation", "visual", "pressure"]
  },
  {
    "name": "IHandFeedbackDevice.cs",
    "description": "Defines the interface implemented by all feedback-capable devices (like Nova).",
    "tags": ["interface", "feedback", "device"]
  },

  {
    "name": "SG_Material.cs",
    "description": "Defines material properties for haptic resistance and response.",
    "tags": ["material", "haptic", "resistance"]
  },
  {
    "name": "SG_MaterialProperties.cs",
    "description": "Holds stiffness, damping, and friction parameters for materials.",
    "tags": ["material", "physics", "property"]
  },
  {
    "name": "SG_MaterialDetector.cs",
    "description": "Detects what material type the hand is touching or grabbing.",
    "tags": ["material", "detect", "touch"]
  },
  {
    "name": "SG_Breakable.cs",
    "description": "Represents an object that can break when enough force is applied.",
    "tags": ["breakable", "force", "object"]
  },
  {
    "name": "SG_BreakableContainer.cs",
    "description": "Container object that spawns fragments when broken.",
    "tags": ["break", "container", "fragments"]
  },
  {
    "name": "SG_Grabable.cs",
    "description": "Defines objects that can be picked up, held, or interacted with using the glove.",
    "tags": ["grab", "object", "interaction"]
  },
  {
    "name": "SG_GrabScript.cs",
    "description": "Handles grabbing logic and state changes between grab and release.",
    "tags": ["grab", "interaction", "logic"]
  },
  {
    "name": "SG_PhysicsGrab.cs",
    "description": "Implements realistic physics-based grab and release behavior.",
    "tags": ["physics", "grab", "interaction"]
  },
  {
    "name": "SG_GrabPoint.cs",
    "description": "Defines specific grab points and orientations for an interactable object.",
    "tags": ["grab", "point", "position"]
  },
  {
    "name": "SG_Interactable.cs",
    "description": "Base class for objects that can be interacted with by hands or gloves.",
    "tags": ["interaction", "object", "base"]
  },
  {
    "name": "SG_HoverCollider.cs",
    "description": "Detects hand proximity to objects to trigger hover effects.",
    "tags": ["hover", "detect", "proximity"]
  },
  {
    "name": "SG_SimpleDrawer.cs",
    "description": "Implements a drawer that slides open/closed when pulled.",
    "tags": ["drawer", "example", "interaction"]
  },
  {
    "name": "SG_SnapOptions.cs",
    "description": "Defines options for snapping hand or object poses to targets.",
    "tags": ["snap", "options", "hand", "pose"]
  },
  {
    "name": "SG_SqueezeOnGrab.cs",
    "description": "Adds wrist squeeze or vibration when an object is grabbed.",
    "tags": ["squeeze", "grab", "feedback"]
  },

  {
    "name": "SG_DropZone.cs",
    "description": "Base detection zone for dropped or released objects.",
    "tags": ["drop", "zone", "object"]
  },
  {
    "name": "SG_SnapDropZone.cs",
    "description": "Snaps dropped objects smoothly into a predefined position and orientation.",
    "tags": ["snap", "drop", "placement"]
  },
  {
    "name": "SG_PrecisePlaceZone.cs",
    "description": "Requires precise alignment for objects before confirming placement.",
    "tags": ["precise", "placement", "alignment"]
  },
  {
    "name": "SG_ConfirmZone.cs",
    "description": "Confirms correct placement when multiple zones are properly filled.",
    "tags": ["confirm", "zone", "placement"]
  },
  {
    "name": "SG_HandDetector.cs",
    "description": "Detects when a tracked hand enters or leaves a collider zone.",
    "tags": ["hand", "detect", "zone"]
  },

  {
    "name": "SG_BasicGesture.cs",
    "description": "Defines simple hand gesture recognition patterns.",
    "tags": ["gesture", "recognition", "hand"]
  },
  {
    "name": "SG_GestureLayer.cs",
    "description": "Manages gesture sets and active gesture detection layers.",
    "tags": ["gesture", "layer", "tracking"]
  },
  {
    "name": "IHandPoseProvider.cs",
    "description": "Interface for classes providing hand pose data to animators.",
    "tags": ["interface", "pose", "provider"]
  },
  {
    "name": "SG_PrecisionPoser.cs",
    "description": "Allows manual pose control for calibration or testing gestures.",
    "tags": ["pose", "precision", "tool"]
  },
  {
    "name": "SG_WireFrame.cs",
    "description": "Renders a wireframe hand skeleton for debugging joint data.",
    "tags": ["wireframe", "debug", "visual"]
  },

  {
    "name": "SG_XR_Rig.cs",
    "description": "Defines XR rig structure, including head, controllers, and tracked hands.",
    "tags": ["xr", "rig", "structure"]
  },
  {
    "name": "SG_XR_Setup.cs",
    "description": "Auto-detects active headset and loads the matching XR rig configuration.",
    "tags": ["xr", "setup", "headset"]
  },
  {
    "name": "SG_XR_Devices.cs",
    "description": "Detects connected XR controllers, headsets, and trackers.",
    "tags": ["xr", "device", "detection"]
  },
  {
    "name": "SG_XR_ControllerTracking.cs",
    "description": "Tracks XR controller positions and orientations in the scene.",
    "tags": ["xr", "controller", "tracking"]
  },
  {
    "name": "SG_XR_ControllerButton.cs",
    "description": "Detects button presses and grip input on XR controllers.",
    "tags": ["xr", "input", "controller", "button"]
  },
  {
    "name": "SG_XR_ListDevices.cs",
    "description": "Displays all connected XR and SenseGlove devices for debugging.",
    "tags": ["xr", "list", "devices"]
  },
  {
    "name": "SG_XR_SceneTrackingLinks.cs",
    "description": "Links XR rig transforms and gloves for consistent scene tracking.",
    "tags": ["xr", "link", "tracking"]
  },
  {
    "name": "SG_XR_RoomSetup.cs",
    "description": "Handles room-scale calibration and recentering in XR environments.",
    "tags": ["xr", "room", "setup", "calibration"]
  },
  {
    "name": "SG_XR_StablePanel.cs",
    "description": "Keeps UI panels stable and facing the user’s headset.",
    "tags": ["xr", "ui", "panel", "display"]
  },
  {
    "name": "SG_XR_Troubleshooting.cs",
    "description": "Provides diagnostics and setup validation for XR and glove systems.",
    "tags": ["xr", "troubleshoot", "debug"]
  },

  {
    "name": "SG_CalibrationVoid.cs",
    "description": "Controls glove calibration process, manages instructions and scene flow.",
    "tags": ["calibration", "setup", "glove"]
  },
  {
    "name": "SG_DoubleControlButton.cs",
    "description": "Detects short and long button presses and triggers corresponding events.",
    "tags": ["button", "input", "control"]
  },

  {
    "name": "SG_ScriptDetector.cs",
    "description": "Detects and tracks scripts associated with colliders in a zone.",
    "tags": ["script", "detect", "collider"]
  },
  {
    "name": "SG_SettingsEditor.cs",
    "description": "Provides an editor window to edit global SenseGlove Unity settings.",
    "tags": ["editor", "settings", "unity"]
  },
  {
    "name": "SG_UnitySettings.cs",
    "description": "ScriptableObject that stores project-wide configuration for SenseGlove.",
    "tags": ["unity", "settings", "config"]
  },
  {
    "name": "SG_SmoothMovement.cs",
    "description": "Smoothly interpolates transform position and rotation between two states.",
    "tags": ["movement", "smooth", "interpolation"]
  },
  {
    "name": "SG_PrecisionPoser.cs",
    "description": "Manual tool for precisely adjusting hand and finger poses.",
    "tags": ["precision", "poser", "hand"]
  },
  {
    "name": "SGEx_TestWaveform.cs",
    "description": "Example script demonstrating vibration waveform activation with key press.",
    "tags": ["example", "test", "waveform"]
  }
]
